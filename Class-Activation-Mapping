import tensorflow as tf
import numpy as np
import pylab as pl
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# CONFIGURATION
tf.reset_default_graph()
lr = 1E-3
n_iterations, batch_size, print_every = 2**14 , 2**8, 2**9
dtype, shape = tf.float32, [None, 28, 28, 1]

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# DATA
(train, label_train), (test, label_test) = tf.keras.datasets.fashion_mnist.load_data()
# one hot encode, could be done (but not as flexible) with tf
classes = 10
targets = np.array([label_train]).reshape(-1)
label_train = np.eye(classes)[targets]
targets = np.array([label_test]).reshape(-1)
label_test = np.eye(classes)[targets]
train = train.astype(np.float32)/255


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# NETWORK
def conv_block(X, n_filter=32, s_filter=5, concat=True, training=True):
  x_clean = tf.layers.conv2d(inputs=X, filters=1, kernel_size=[1, 1], padding="same",
                             activation=None)
  batch = tf.layers.batch_normalization(x_clean, training=training)
  conv1 = tf.layers.conv2d(inputs=batch, filters=n_filter, kernel_size=[s_filter, s_filter], 
                       padding="same", activation=tf.nn.sigmoid)
  if concat:
    y = tf.concat([conv1,batch], axis=3)
  else:
    y = conv1
  return y

def model(X, training):
  conv1 = conv_block(X, 64)
  conv2 = conv_block(conv1, 64, 7)
  up = tf.image.resize_nearest_neighbor(conv2, shape[1:-1])
  conv3 = conv_block(up, 32, 5, False)
  feat = tf.identity(conv3)
  drop = tf.layers.dropout(inputs=conv3, rate=0.4)

  red = tf.reduce_mean(drop, axis=[1,2])
  y = tf.layers.dense(inputs=red, units=10, activation=tf.nn.softmax, name="out")
  with tf.variable_scope("out", reuse=True):
    w = tf.get_variable('kernel')
  # personally: less code then scopes
  return y, w, feat
  


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# GOALS
phase = tf.placeholder(tf.bool, name='phase') 
X = tf.placeholder(dtype=dtype, shape=shape)
Y = tf.placeholder(dtype=dtype, shape=[None, 10])
y, w, feat = model(X, phase)

loss = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(y + 1E-10), reduction_indices=[1]))
update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
step = tf.train.AdamOptimizer(1E-2).minimize(loss)
step = tf.group([step, update_ops])

hits = tf.equal(tf.argmax(y,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(hits, tf.float32))

class_map = get_class_map(y, feat, w)

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# TRAINING & TESTING
classm, y = 0, y
with tf.Session() as sess:

    sess.run(tf.global_variables_initializer())

    for iteration in range(num_iterations):
        indices = np.random.choice(len(train), batch_size)
        batch_X = np.expand_dims(train[indices], 3)
        batch_Y = label_train[indices]
        feed_dict = {X: batch_X, Y: batch_Y, phase: True}
    
        _, lo = sess.run([step, loss], feed_dict=feed_dict)
        if iteration % print_every == 0:
          acc = sess.run(accuracy, feed_dict={X: np.expand_dims(test, 3), Y: label_test, phase: True})
          print("Acc.: ", acc)
          if acc > 1.0:
            break
            
            
    classm, y = sess.run([class_map, y], feed_dict={X: np.expand_dims(test[:5], 3), Y: label_test[:5], phase: False})




# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# CLASS ACTIVATION MAP
def get_class_map(label, conv, w, im_width=shape[1]):
    output_channels = int(conv.get_shape()[-1])
    conv_resized = tf.image.resize_nearest_neighbor(conv, shape[1:-1])
    conv_resized = tf.reshape(conv_resized, [-1, im_width * im_width, output_channels])
    classmap = tf.tensordot(conv_resized, w, axes=1) 
    classmap = tf.reshape(classmap, [-1, im_width, im_width, 10])
    return classmap
    
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
# Do some fancy printing
label_dict = {
 0: "T-shirt/top",
 1: "Trouser",
 2: "Pullover",
 3: "Dress",
 4: "Coat",
 5: "Sandal",
 6: "Shirt",
 7: "Sneaker",
 8: "Bag",
 9: "Ankle boot"
}


cmapn = "viridis"
cmap = "YlGnBu"
ex_n = 4
pl.subplot(2,6,1)
pl.imshow(np.expand_dims(test, 3)[ex_n,:,:,0], cmap = cmap)
pl.axis('off')
pl.title(label_dict[np.argmax(y,axis = 1)[ex_n]])

pl.subplot(2,6,2)
pl.imshow(classm[ex_n,:,:,0], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[0])

pl.subplot(2,6,3)
pl.imshow(classm[ex_n,:,:,1], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[1])

pl.subplot(2,6,4)
pl.imshow(classm[ex_n,:,:,2], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[2])

pl.subplot(2,6,5)
pl.imshow(classm[ex_n,:,:,3], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[3])

pl.subplot(2,6,6)
pl.imshow(classm[ex_n,:,:,4], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[4])

pl.subplot(2,6,8)
pl.imshow(classm[ex_n,:,:,5], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[5])

pl.subplot(2,6,9)
pl.imshow(classm[ex_n,:,:,6], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[6])

pl.subplot(2,6,10)
pl.imshow(classm[ex_n,:,:,7], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[7])

pl.subplot(2,6,11)
pl.imshow(classm[ex_n,:,:,8], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[8])

pl.subplot(2,6,12)
pl.imshow(classm[ex_n,:,:,9], cmap=cmapn)
pl.axis('off')
pl.title(label_dict[9])

